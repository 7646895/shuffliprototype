// Generated by Apple Swift version 4.0 effective-3.2 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import QuartzCore;
@import Foundation;
@import ObjectiveC;
@import CoreFoundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("Material")
@class CAShapeLayer;
@class UIImage;
enum Gravity : NSInteger;
@class UIColor;
@class NSCoder;

SWIFT_CLASS("_TtC8Material4View")
@interface View : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// A property that manages an image for the visualLayer’s contents
/// property. Images should not be set to the backing layer’s contents
/// property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Allows a relative subrectangle within the range of 0 to 1 to be
/// specified for the visualLayer’s contents property. This allows
/// much greater flexibility than the contentsGravity property in
/// terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;
/// A CGRect that defines a stretchable region inside the visualLayer
/// with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;
/// A floating point value that defines a ratio between the pixel
/// dimensions of the visualLayer’s contents property and the size
/// of the view. By default, this value is set to the Screen.scale.
@property (nonatomic) CGFloat contentsScale;
/// A Preset for the contentsGravity property.
@property (nonatomic) enum Gravity contentsGravityPreset;
/// Determines how content should be aligned within the visualLayer’s bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end

enum ContentViewAlignment : NSInteger;
enum EdgeInsetsPreset : NSInteger;
enum InterimSpacePreset : NSInteger;

SWIFT_CLASS("_TtC8Material3Bar")
@interface Bar : View
/// Will layout the view.
@property (nonatomic, readonly) BOOL willLayout;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Should center the contentView.
@property (nonatomic) enum ContentViewAlignment contentViewAlignment;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// A wrapper around grid.interimSpace.
@property (nonatomic) CGFloat interimSpace;
/// Grid cell factor.
@property (nonatomic) CGFloat gridFactor;
/// ContentView that holds the any desired subviews.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// Left side UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/// Right side UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
/// Center UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull centerViews;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer.
- (nonnull instancetype)init;
/// A convenience initializer with parameter settings.
/// \param leftViews An Array of UIViews that go on the left side.
///
/// \param rightViews An Array of UIViews that go on the right side.
///
/// \param centerViews An Array of UIViews that go in the center.
///
- (nonnull instancetype)initWithLeftViews:(NSArray<UIView *> * _Nullable)leftViews rightViews:(NSArray<UIView *> * _Nullable)rightViews centerViews:(NSArray<UIView *> * _Nullable)centerViews;
- (void)layoutSubviews;
/// Reloads the view.
- (void)reload;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BorderWidthPreset, "BorderWidthPreset") {
  BorderWidthPresetNone = 0,
  BorderWidthPresetBorder1 = 1,
  BorderWidthPresetBorder2 = 2,
  BorderWidthPresetBorder3 = 3,
  BorderWidthPresetBorder4 = 4,
  BorderWidthPresetBorder5 = 5,
  BorderWidthPresetBorder6 = 6,
  BorderWidthPresetBorder7 = 7,
  BorderWidthPresetBorder8 = 8,
  BorderWidthPresetBorder9 = 9,
};

@class NSBundle;
@class UIViewController;

SWIFT_CLASS("_TtC8Material26BottomNavigationController")
@interface BottomNavigationController : UITabBarController
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with an Optional nib and bundle.
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// An initializer that accepts no parameters.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object an Array of UIViewControllers.
/// \param viewControllers An Array of UIViewControllers.
///
- (nonnull instancetype)initWithViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


SWIFT_CLASS("_TtC8Material12BottomTabBar")
@interface BottomTabBar : UITabBar
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Automatically aligns the BottomNavigationBar to the superview.
@property (nonatomic) BOOL isAlignedToParentAutomatically;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)didMoveToSuperview;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end

enum PulseAnimation : NSInteger;
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC8Material6Button")
@interface Button : UIButton
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// A preset property for updated contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// Sets the normal and highlighted image for the button.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Sets the normal and highlighted title for the button.
@property (nonatomic, copy) NSString * _Nullable title;
/// Sets the normal and highlighted titleColor for the button.
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
/// A convenience initializer that acceps an image and tint
/// \param image A UIImage.
///
/// \param tintColor A UI
///
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image tintColor:(UIColor * _Nonnull)tintColor;
/// A convenience initializer that acceps a title and title
/// \param title A String.
///
/// \param titleColor A UI
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title titleColor:(UIColor * _Nonnull)titleColor;
- (void)layoutSubviews;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)bringImageViewToFront;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end








@interface CALayer (SWIFT_EXTENSION(Material)) <CAAnimationDelegate>
@end


@interface CALayer (SWIFT_EXTENSION(Material))
/// Manages the layout for the shape of the view instance.
- (void)layoutShape;
/// Sets the shadow path.
- (void)layoutShadowPath;
@end

@class CAAnimation;

@interface CALayer (SWIFT_EXTENSION(Material))
/// A function that accepts CAAnimation objects and executes them on the
/// view’s backing layer.
/// \param animation A CAAnimation instance.
///
- (void)animate:(NSArray<CAAnimation *> * _Nonnull)animations;
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;
/// A delegation function that is executed when the backing layer stops
/// running an animation.
/// \param animation The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
///
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end

enum HeightPreset : NSInteger;
enum ShapePreset : NSInteger;
enum DepthPreset : NSInteger;
enum CornerRadiusPreset : NSInteger;

@interface CALayer (SWIFT_EXTENSION(Material))
/// A property that accesses the frame.origin.x property.
@property (nonatomic) CGFloat x;
/// A property that accesses the frame.origin.y property.
@property (nonatomic) CGFloat y;
/// A property that accesses the frame.size.width property.
@property (nonatomic) CGFloat width;
/// A property that accesses the frame.size.height property.
@property (nonatomic) CGFloat height;
/// HeightPreset value.
@property (nonatomic) enum HeightPreset heightPreset;
/// A property that manages the overall shape for the object. If either the
/// width or height property is set, the other will be automatically adjusted
/// to maintain the shape of the object.
@property (nonatomic) enum ShapePreset shapePreset;
/// A preset value for Depth.
@property (nonatomic) enum DepthPreset depthPreset;
/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL isShadowPathAutoSizing;
/// A property that sets the cornerRadius of the backing layer.
@property (nonatomic) enum CornerRadiusPreset cornerRadiusPreset;
/// A preset property to set the borderWidth.
@property (nonatomic) enum BorderWidthPreset borderWidthPreset;
@end


SWIFT_CLASS("_TtC8Material9PulseView")
@interface PulseView : View
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class Toolbar;

SWIFT_CLASS("_TtC8Material4Card")
@interface Card : PulseView
/// A container view for subviews.
@property (nonatomic, readonly, strong) UIView * _Nonnull container;
@property (nonatomic) enum CornerRadiusPreset cornerRadiusPreset;
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) enum ShapePreset shapePreset;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// A reference to the toolbar.
@property (nonatomic, strong) Toolbar * _Nullable toolbar;
/// A preset wrapper around toolbarEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset toolbarEdgeInsetsPreset;
/// A reference to toolbarEdgeInsets.
@property (nonatomic) UIEdgeInsets toolbarEdgeInsets;
/// A reference to the contentView.
@property (nonatomic, strong) UIView * _Nullable contentView;
/// A preset wrapper around contentViewEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentViewEdgeInsetsPreset;
/// A reference to contentViewEdgeInsets.
@property (nonatomic) UIEdgeInsets contentViewEdgeInsets;
/// A reference to the bottomBar.
@property (nonatomic, strong) Bar * _Nullable bottomBar;
/// A preset wrapper around bottomBarEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset bottomBarEdgeInsetsPreset;
/// A reference to bottomBarEdgeInsets.
@property (nonatomic) UIEdgeInsets bottomBarEdgeInsets;
/// An initializer that accepts a NSCoder.
/// \param coder aDecoder A NSCoder.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that accepts a CGRect.
/// \param frame A CGRect.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
/// A convenience initiazlier.
/// \param toolbar An optional Toolbar.
///
/// \param contentView An optional UIView.
///
/// \param bottomBar An optional Bar.
///
- (nullable instancetype)initWithToolbar:(Toolbar * _Nullable)toolbar contentView:(UIView * _Nullable)contentView bottomBar:(Bar * _Nullable)bottomBar;
- (void)layoutSubviews;
/// Reloads the layout.
- (void)reload;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
/// Prepare the view size from a given top position.
/// \param view A UIView.
///
/// \param edge insets An EdgeInsets.
///
/// \param from top A CGFloat.
///
///
/// returns:
/// A CGFloat.
- (CGFloat)prepareWithView:(UIView * _Nonnull)view with:(UIEdgeInsets)insets from:(CGFloat)top;
@end




SWIFT_CLASS_NAMED("CollectionReusableView")
@interface CollectionReusableView : UICollectionReusableView
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A property that manages an image for the visualLayer’s contents
/// property. Images should not be set to the backing layer’s contents
/// property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Allows a relative subrectangle within the range of 0 to 1 to be
/// specified for the visualLayer’s contents property. This allows
/// much greater flexibility than the contentsGravity property in
/// terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;
/// A CGRect that defines a stretchable region inside the visualLayer
/// with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;
/// A floating point value that defines a ratio between the pixel
/// dimensions of the visualLayer’s contents property and the size
/// of the view. By default, this value is set to the Screen.scale.
@property (nonatomic) CGFloat contentsScale;
/// A Preset for the contentsGravity property.
@property (nonatomic) enum Gravity contentsGravityPreset;
/// Determines how content should be aligned within the visualLayer’s bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// A wrapper around grid.interimSpace.
@property (nonatomic) CGFloat interimSpace;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end





@class UICollectionViewLayout;

SWIFT_CLASS("_TtC8Material14CollectionView")
@interface CollectionView : UICollectionView
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// Scroll direction.
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// Spacing between items.
@property (nonatomic) CGFloat interimSpace;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object.
/// \param frame A CGRect defining the view’s frame.
///
/// \param collectionViewLayout A UICollectionViewLayout reference.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object.
/// \param frame A CGRect defining the view’s frame.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer that initializes the object.
- (nonnull instancetype)init;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


SWIFT_CLASS_NAMED("CollectionViewCard")
@interface CollectionViewCard : Card
/// An index of IndexPath to DataSourceItem.
@property (nonatomic, copy) NSDictionary<NSIndexPath *, id> * _Nonnull dataSourceItemsIndexPaths;
/// A reference to the collectionView.
@property (nonatomic, readonly, strong) CollectionView * _Nonnull collectionView;
- (void)layoutSubviews;
- (void)prepare;
- (void)reload;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface CollectionViewCard (SWIFT_EXTENSION(Material)) <UICollectionViewDelegate>
@end



@class UICollectionViewCell;

@interface CollectionViewCard (SWIFT_EXTENSION(Material)) <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("CollectionViewCell")
@interface CollectionViewCell : UICollectionViewCell
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A property that manages an image for the visualLayer’s contents
/// property. Images should not be set to the backing layer’s contents
/// property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Allows a relative subrectangle within the range of 0 to 1 to be
/// specified for the visualLayer’s contents property. This allows
/// much greater flexibility than the contentsGravity property in
/// terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;
/// A CGRect that defines a stretchable region inside the visualLayer
/// with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;
/// A floating point value that defines a ratio between the pixel
/// dimensions of the visualLayer’s contents property and the size
/// of the view. By default, this value is set to the Screen.scale.
@property (nonatomic) CGFloat contentsScale;
/// A Preset for the contentsGravity property.
@property (nonatomic) enum Gravity contentsGravityPreset;
/// Determines how content should be aligned within the visualLayer’s bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end






SWIFT_CLASS("_TtC8Material24CollectionViewController")
@interface CollectionViewController : UIViewController
/// A reference to a Reminder.
@property (nonatomic, readonly, strong) CollectionView * _Nonnull collectionView;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepareView method
/// to initialize property values and other setup operations.
/// The super.prepareView method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface CollectionViewController (SWIFT_EXTENSION(Material)) <UICollectionViewDelegate>
@end




@interface CollectionViewController (SWIFT_EXTENSION(Material)) <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class NSIndexPath;
@class UICollectionViewLayoutAttributes;

SWIFT_CLASS("_TtC8Material20CollectionViewLayout")
@interface CollectionViewLayout : UICollectionViewLayout
/// Used to calculate the dimensions of the cells.
@property (nonatomic) CGPoint offset;
/// The size of items.
@property (nonatomic) CGSize itemSize;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A wrapper around grid.contentEdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// Size of the content.
@property (nonatomic, readonly) CGSize contentSize;
/// Scroll direction.
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// Spacing between items.
@property (nonatomic) CGFloat interimSpace;
@property (nonatomic, readonly) CGSize collectionViewContentSize;
/// Retrieves the index paths for the items within the passed in CGRect.
/// \param rect A CGRect that acts as the bounds to find the items within.
///
///
/// returns:
/// An Array of NSIndexPath objects.
- (NSArray<NSIndexPath *> * _Nonnull)indexPathsOfItemsInRectWithRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (void)prepareLayout;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class CIColor;

SWIFT_CLASS("_TtC8Material5Color")
@interface Color : UIColor
- (nonnull instancetype)initWithWhite:(CGFloat)white alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDisplayP3Red:(CGFloat)displayP3Red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=10.0);
- (nonnull instancetype)initWithCGColor:(CGColorRef _Nonnull)cgColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPatternImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCIColor:(CIColor * _Nonnull)ciColor OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("ColorPalette")
@protocol ColorPalette
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten5;)
+ (UIColor * _Nonnull)lighten5 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten4;)
+ (UIColor * _Nonnull)lighten4 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten3;)
+ (UIColor * _Nonnull)lighten3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten2;)
+ (UIColor * _Nonnull)lighten2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten1;)
+ (UIColor * _Nonnull)lighten1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull base;)
+ (UIColor * _Nonnull)base SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken1;)
+ (UIColor * _Nonnull)darken1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken2;)
+ (UIColor * _Nonnull)darken2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken3;)
+ (UIColor * _Nonnull)darken3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken4;)
+ (UIColor * _Nonnull)darken4 SWIFT_WARN_UNUSED_RESULT;
@optional
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent1;)
+ (UIColor * _Nonnull)accent1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent2;)
+ (UIColor * _Nonnull)accent2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent3;)
+ (UIColor * _Nonnull)accent3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent4;)
+ (UIColor * _Nonnull)accent4 SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ContentViewAlignment, "ContentViewAlignment") {
  ContentViewAlignmentFull = 0,
  ContentViewAlignmentCenter = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, CornerRadiusPreset, "CornerRadiusPreset") {
  CornerRadiusPresetNone = 0,
  CornerRadiusPresetCornerRadius1 = 1,
  CornerRadiusPresetCornerRadius2 = 2,
  CornerRadiusPresetCornerRadius3 = 3,
  CornerRadiusPresetCornerRadius4 = 4,
  CornerRadiusPresetCornerRadius5 = 5,
  CornerRadiusPresetCornerRadius6 = 6,
  CornerRadiusPresetCornerRadius7 = 7,
  CornerRadiusPresetCornerRadius8 = 8,
  CornerRadiusPresetCornerRadius9 = 9,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DepthPreset, "DepthPreset") {
  DepthPresetNone = 0,
  DepthPresetDepth1 = 1,
  DepthPresetDepth2 = 2,
  DepthPresetDepth3 = 3,
  DepthPresetDepth4 = 4,
  DepthPresetDepth5 = 5,
};

@protocol UIViewControllerContextTransitioning;
enum MotionAnimationTimingFunction : NSInteger;

SWIFT_CLASS("_TtC8Material14MotionAnimator")
@interface MotionAnimator : NSObject
/// A boolean indicating whether Motion is presenting a view controller.
@property (nonatomic, readonly) BOOL isPresenting;
/// A boolean indicating whether the view controller is a container.
@property (nonatomic, readonly) BOOL isContainer;
/// A reference to the transition snapshot.
@property (nonatomic, strong) UIView * _Null_unspecified transitionSnapshot;
/// A reference to the transition background view.
@property (nonatomic, readonly, strong) UIView * _Nonnull transitionBackgroundView;
/// A reference to the view controller that is being transitioned to.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull toViewController;
/// A reference to the view controller that is being transitioned from.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull fromViewController;
/// The transition context for the current transition.
@property (nonatomic, strong) id <UIViewControllerContextTransitioning> _Null_unspecified transitionContext;
/// The transition delay time.
@property (nonatomic) NSTimeInterval delay;
/// The transition duration time.
@property (nonatomic) NSTimeInterval duration;
/// The transition container view.
@property (nonatomic, strong) UIView * _Null_unspecified containerView;
/// The view that is used to animate the transitions between view controllers.
@property (nonatomic, strong) UIView * _Nonnull transitionView;
/// The view that is being transitioned to.
@property (nonatomic, readonly, strong) UIView * _Nonnull toView;
/// The subviews of the view being transitioned to.
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull toSubviews;
/// The view that is being transitioned from.
@property (nonatomic, readonly, strong) UIView * _Nonnull fromView;
/// The subviews of the view being transitioned from.
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull fromSubviews;
/// The default initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// An initializer to modify the presenting and container state.
/// \param isPresenting A boolean value indicating if the
/// Motion instance is presenting the view controller.
///
/// \param isContainer A boolean value indicating if the
/// Motion instance is a container view controller.
///
- (nonnull instancetype)initWithIsPresenting:(BOOL)isPresenting isContainer:(BOOL)isContainer OBJC_DESIGNATED_INITIALIZER;
/// Executes a block of code after a time delay.
/// \param duration An animation duration time.
///
/// \param animations An animation block.
///
/// \param execute block A completion block that is executed once
/// the animations have completed.
///
+ (void (^ _Nullable)(BOOL))delay:(NSTimeInterval)time execute:(void (^ _Nonnull)(void))block;
/// Cancels the delayed MotionDelayCancelBlock.
/// \param delayed completion An MotionDelayCancelBlock.
///
+ (void)cancelWithDelayed:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL))completion;
/// Disables the default animations set on CALayers.
/// \param animations A callback that wraps the animations to disable.
///
+ (void)disable:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations;
/// Runs an animation with a specified duration.
/// \param duration An animation duration time.
///
/// \param animations An animation block.
///
/// \param timingFunction An MotionAnimationTimingFunction value.
///
/// \param completion A completion block that is executed once
/// the animations have completed.
///
+ (void)animateWithDuration:(CFTimeInterval)duration timingFunction:(enum MotionAnimationTimingFunction)timingFunction animations:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(void))completion;
@end


SWIFT_CLASS("_TtC8Material6Motion")
@interface Motion : MotionAnimator
/// The animation method that is used to coordinate the transition.
/// \param using transitionContext A UIViewControllerContextTransitioning.
///
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsPresenting:(BOOL)isPresenting isContainer:(BOOL)isContainer OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material16DismissingMotion")
@interface DismissingMotion : Motion
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsPresenting:(BOOL)isPresenting isContainer:(BOOL)isContainer OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, Display, "Display") {
  DisplayPartial = 0,
  DisplayFull = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DividerAlignment, "DividerAlignment") {
  DividerAlignmentTop = 0,
  DividerAlignmentLeft = 1,
  DividerAlignmentBottom = 2,
  DividerAlignmentRight = 3,
};

@protocol DynamicFontTypeDelegate;

SWIFT_CLASS_NAMED("DynamicFontType")
@interface DynamicFontType : NSObject
/// A weak reference to a DynamicFontTypeDelegate.
@property (nonatomic, weak) id <DynamicFontTypeDelegate> _Nullable delegate;
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("DynamicFontTypeDelegate")
@protocol DynamicFontTypeDelegate
/// A delegation method that is executed when the dynamic type
/// is changed.
/// \param dynamicFontType A DynamicFontType.
///
- (void)dynamicFontTypeWithDynamicFontType:(DynamicFontType * _Nonnull)dynamicFontType;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, EdgeInsetsPreset, "EdgeInsetsPreset") {
  EdgeInsetsPresetNone = 0,
  EdgeInsetsPresetSquare1 = 1,
  EdgeInsetsPresetSquare2 = 2,
  EdgeInsetsPresetSquare3 = 3,
  EdgeInsetsPresetSquare4 = 4,
  EdgeInsetsPresetSquare5 = 5,
  EdgeInsetsPresetSquare6 = 6,
  EdgeInsetsPresetSquare7 = 7,
  EdgeInsetsPresetSquare8 = 8,
  EdgeInsetsPresetSquare9 = 9,
  EdgeInsetsPresetWideRectangle1 = 10,
  EdgeInsetsPresetWideRectangle2 = 11,
  EdgeInsetsPresetWideRectangle3 = 12,
  EdgeInsetsPresetWideRectangle4 = 13,
  EdgeInsetsPresetWideRectangle5 = 14,
  EdgeInsetsPresetWideRectangle6 = 15,
  EdgeInsetsPresetWideRectangle7 = 16,
  EdgeInsetsPresetWideRectangle8 = 17,
  EdgeInsetsPresetWideRectangle9 = 18,
  EdgeInsetsPresetTallRectangle1 = 19,
  EdgeInsetsPresetTallRectangle2 = 20,
  EdgeInsetsPresetTallRectangle3 = 21,
  EdgeInsetsPresetTallRectangle4 = 22,
  EdgeInsetsPresetTallRectangle5 = 23,
  EdgeInsetsPresetTallRectangle6 = 24,
  EdgeInsetsPresetTallRectangle7 = 25,
  EdgeInsetsPresetTallRectangle8 = 26,
  EdgeInsetsPresetTallRectangle9 = 27,
/// horizontally
  EdgeInsetsPresetHorizontally1 = 28,
  EdgeInsetsPresetHorizontally2 = 29,
  EdgeInsetsPresetHorizontally3 = 30,
  EdgeInsetsPresetHorizontally4 = 31,
  EdgeInsetsPresetHorizontally5 = 32,
/// vertically
  EdgeInsetsPresetVertically1 = 33,
  EdgeInsetsPresetVertically2 = 34,
  EdgeInsetsPresetVertically3 = 35,
  EdgeInsetsPresetVertically4 = 36,
  EdgeInsetsPresetVertically5 = 37,
};

enum TextFieldPlaceholderAnimation : NSInteger;
@class UIFont;
@class UILabel;
@class IconButton;

SWIFT_CLASS("_TtC8Material9TextField")
@interface TextField : UITextField
/// Default size when using AutoLayout.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// A Boolean that indicates if the placeholder label is animated.
@property (nonatomic) BOOL isPlaceholderAnimated;
/// Set the placeholder animation value.
@property (nonatomic) enum TextFieldPlaceholderAnimation placeholderAnimation;
/// A boolean indicating whether the text is empty.
@property (nonatomic, readonly) BOOL isEmpty;
@property (nonatomic, strong) UIView * _Nullable leftView;
/// The leftView width value.
@property (nonatomic, readonly) CGFloat leftViewWidth;
/// The leftView offset value.
@property (nonatomic) CGFloat leftViewOffset;
/// Placeholder normal text
@property (nonatomic, strong) UIColor * _Nonnull leftViewNormalColor;
/// Placeholder active text
@property (nonatomic, strong) UIColor * _Nonnull leftViewActiveColor;
/// Divider normal height.
@property (nonatomic) CGFloat dividerNormalHeight;
/// Divider active height.
@property (nonatomic) CGFloat dividerActiveHeight;
/// Divider normal color.
@property (nonatomic, strong) UIColor * _Nonnull dividerNormalColor;
/// Divider active color.
@property (nonatomic, strong) UIColor * _Nonnull dividerActiveColor;
/// The placeholderLabel font value.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The placeholderLabel text value.
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// The placeholder UILabel.
@property (nonatomic, readonly, strong) UILabel * _Nonnull placeholderLabel;
/// Placeholder normal text
@property (nonatomic, strong) UIColor * _Nonnull placeholderNormalColor;
/// Placeholder active text
@property (nonatomic, strong) UIColor * _Nonnull placeholderActiveColor;
/// This property adds a padding to placeholder y position animation
@property (nonatomic) CGFloat placeholderVerticalOffset;
/// The detailLabel UILabel that is displayed.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// The detailLabel text value.
@property (nonatomic, copy) NSString * _Nullable detail;
/// Detail text
@property (nonatomic, strong) UIColor * _Nonnull detailColor;
/// Vertical distance for the detailLabel from the divider.
@property (nonatomic) CGFloat detailVerticalOffset;
/// Handles the textAlignment of the placeholderLabel.
@property (nonatomic) NSTextAlignment textAlignment;
/// A reference to the clearIconButton.
@property (nonatomic, readonly, strong) IconButton * _Nullable clearIconButton;
/// Enables the clearIconButton.
@property (nonatomic) BOOL isClearIconButtonEnabled;
/// Enables the automatic handling of the clearIconButton.
@property (nonatomic) BOOL isClearIconButtonAutoHandled;
/// A reference to the visibilityIconButton.
@property (nonatomic, readonly, strong) IconButton * _Nullable visibilityIconButton;
/// Enables the visibilityIconButton.
@property (nonatomic) BOOL isVisibilityIconButtonEnabled;
/// Enables the automatic handling of the visibilityIconButton.
@property (nonatomic) BOOL isVisibilityIconButtonAutoHandled;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
/// Ensures that the components are sized correctly.
- (void)reload;
@end


SWIFT_CLASS("_TtC8Material14ErrorTextField")
@interface ErrorTextField : TextField
/// Controls the visibility of detailLabel
@property (nonatomic) BOOL isErrorRevealed;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material9FABButton")
@interface FABButton : Button
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

enum FABMenuDirection : NSInteger;
@protocol FABMenuDelegate;
@class FABMenuItem;

SWIFT_CLASS_NAMED("FABMenu")
@interface FABMenu : View
@property (nonatomic) enum FABMenuDirection fabMenuDirection;
/// A reference to the base FABButton.
@property (nonatomic, strong) FABButton * _Nullable fabButton;
/// Size of FABMenuItems.
@property (nonatomic) CGSize fabMenuItemSize;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// The space between views.
@property (nonatomic) CGFloat interimSpace;
/// A boolean indicating if the menu is open or not.
@property (nonatomic) BOOL isOpened;
/// A boolean indicating if the menu is enabled.
@property (nonatomic) BOOL isEnabled;
/// An optional delegation handler.
@property (nonatomic, weak) id <FABMenuDelegate> _Nullable delegate;
/// A reference to the FABMenuItems
@property (nonatomic, copy) NSArray<FABMenuItem *> * _Nonnull fabMenuItems;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end




@interface FABMenu (SWIFT_EXTENSION(Material))
/// Handles the hit test for the Menu and views outside of the Menu bounds.
/// <ul>
///   <li>
///     _ point: A CGPoint.
///   </li>
/// </ul>
/// \param with event An optional UIEvent.
///
///
/// returns:
/// An optional UIView.
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


@interface FABMenu (SWIFT_EXTENSION(Material))
/// Open the Menu component with animation options.
/// \param duration The time for each view’s animation.
///
/// \param delay A delay time for each view’s animation.
///
/// \param usingSpringWithDamping A damping ratio for the animation.
///
/// \param initialSpringVelocity The initial velocity for the animation.
///
/// \param options Options to pass to the animation.
///
/// \param animations An animation block to execute on each view’s animation.
///
/// \param completion A completion block to execute on each view’s animation.
///
- (void)openWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)usingSpringWithDamping initialSpringVelocity:(CGFloat)initialSpringVelocity options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(UIView * _Nonnull))animations completion:(void (^ _Nullable)(UIView * _Nonnull))completion;
/// Close the Menu component with animation options.
/// \param duration The time for each view’s animation.
///
/// \param delay A delay time for each view’s animation.
///
/// \param usingSpringWithDamping A damping ratio for the animation.
///
/// \param initialSpringVelocity The initial velocity for the animation.
///
/// \param options Options to pass to the animation.
///
/// \param animations An animation block to execute on each view’s animation.
///
/// \param completion A completion block to execute on each view’s animation.
///
- (void)closeWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)usingSpringWithDamping initialSpringVelocity:(CGFloat)initialSpringVelocity options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(UIView * _Nonnull))animations completion:(void (^ _Nullable)(UIView * _Nonnull))completion;
@end


SWIFT_CLASS("_TtC8Material14RootController")
@interface RootController : UIViewController
/// A Boolean property used to enable and disable interactivity
/// with the rootViewController.
@property (nonatomic) BOOL isUserInteractionEnabled;
/// A UIViewController property that references the active
/// main UIViewController. To swap the rootViewController, it
/// is recommended to use the transitionFromRootViewController
/// helper method.
@property (nonatomic, readonly, strong) UIViewController * _Null_unspecified rootViewController;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with an Optional nib and bundle.
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// An initializer for the BarController.
/// \param rootViewController The main UIViewController.
///
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillLayoutSubviews;
/// A method to swap rootViewController objects.
/// \param toViewController The UIViewController to swap
/// with the active rootViewController.
///
/// \param duration A TimeInterval that sets the
/// animation duration of the transition.
///
/// \param options UIViewAnimationOptions thst are used
/// when animating the transition from the active rootViewController
/// to the toViewController.
///
/// \param animations An animation block that is executed during
/// the transition from the active rootViewController
/// to the toViewController.
///
/// \param completion A completion block that is execited after
/// the transition animation from the active rootViewController
/// to the toViewController has completed.
///
- (void)transitionTo:(UIViewController * _Nonnull)viewController duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// To execute in the order of the layout chain, override this
/// method. <code>layoutSubviews</code> should be called immediately, unless you
/// have a certain need.
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


SWIFT_CLASS("_TtC8Material17FABMenuController")
@interface FABMenuController : RootController
/// Reference to the MenuView.
@property (nonatomic, readonly, strong) FABMenu * _Nonnull fabMenu;
/// The fabMenuBacking UIBlurEffectStyle.
@property (nonatomic) UIBlurEffectStyle fabMenuBackingBlurEffectStyle;
/// A reference to the blurView.
@property (nonatomic, readonly, strong) UIView * _Nullable blurView;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("FABMenuDelegate")
@protocol FABMenuDelegate
@optional
/// A delegation method that is execited when the fabMenu will open.
/// \param fabMenu A FABMenu.
///
- (void)fabMenuWillOpenWithFabMenu:(FABMenu * _Nonnull)fabMenu;
/// A delegation method that is execited when the fabMenu did open.
/// \param fabMenu A FABMenu.
///
- (void)fabMenuDidOpenWithFabMenu:(FABMenu * _Nonnull)fabMenu;
/// A delegation method that is execited when the fabMenu will close.
/// \param fabMenu A FABMenu.
///
- (void)fabMenuWillCloseWithFabMenu:(FABMenu * _Nonnull)fabMenu;
/// A delegation method that is execited when the fabMenu did close.
/// \param fabMenu A FABMenu.
///
- (void)fabMenuDidCloseWithFabMenu:(FABMenu * _Nonnull)fabMenu;
/// A delegation method that is executed when the user taps while
/// the menu is opened.
/// \param fabMenu A FABMenu.
///
/// \param tappedAt point A CGPoint.
///
/// \param isOutside A boolean indicating whether the tap
/// was outside the menu button area.
///
- (void)fabMenuWithFabMenu:(FABMenu * _Nonnull)fabMenu tappedAt:(CGPoint)point isOutside:(BOOL)isOutside;
@end


@interface FABMenuController (SWIFT_EXTENSION(Material)) <FABMenuDelegate>
@end








typedef SWIFT_ENUM_NAMED(NSInteger, FABMenuDirection, "FABMenuDirection") {
  FABMenuDirectionUp = 0,
  FABMenuDirectionDown = 1,
  FABMenuDirectionLeft = 2,
  FABMenuDirectionRight = 3,
};


SWIFT_CLASS("_TtC8Material11FABMenuItem")
@interface FABMenuItem : View
/// A reference to the titleLabel.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// A reference to the fabButton.
@property (nonatomic, readonly, strong) FABButton * _Nonnull fabButton;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
/// A reference to the titleLabel text.
@property (nonatomic, copy) NSString * _Nullable title;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end




@interface FABMenuItem (SWIFT_EXTENSION(Material))
/// Shows the titleLabel.
- (void)showTitleLabel;
/// Hides the titleLabel.
- (void)hideTitleLabel;
@end


SWIFT_CLASS("_TtC8Material10FlatButton")
@interface FlatButton : Button
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, Gravity, "Gravity") {
  GravityCenter = 0,
  GravityTop = 1,
  GravityBottom = 2,
  GravityLeft = 3,
  GravityRight = 4,
  GravityTopLeft = 5,
  GravityTopRight = 6,
  GravityBottomLeft = 7,
  GravityBottomRight = 8,
  GravityResize = 9,
  GravityResizeAspect = 10,
  GravityResizeAspectFill = 11,
};

typedef SWIFT_ENUM_NAMED(NSInteger, GridAxisDirection, "GridAxisDirection") {
  GridAxisDirectionAny = 0,
  GridAxisDirectionHorizontal = 1,
  GridAxisDirectionVertical = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, HeightPreset, "HeightPreset") {
  HeightPresetNone = 0,
  HeightPresetTiny = 20,
  HeightPresetXsmall = 28,
  HeightPresetSmall = 36,
  HeightPresetDefault = 44,
  HeightPresetNormal = 49,
  HeightPresetMedium = 52,
  HeightPresetLarge = 60,
  HeightPresetXlarge = 68,
  HeightPresetXxlarge = 104,
};


SWIFT_CLASS("_TtC8Material10IconButton")
@interface IconButton : Button
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImageView;
enum ToolbarAlignment : NSInteger;

SWIFT_CLASS("_TtC8Material9ImageCard")
@interface ImageCard : Card
/// A Display value to indicate whether or not to
/// display the imageView to the full view
/// bounds.
@property (nonatomic) enum Display imageViewDisplay;
/// A preset wrapper around imageViewEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset imageViewEdgeInsetsPreset;
/// A reference to imageViewEdgeInsets.
@property (nonatomic) UIEdgeInsets imageViewEdgeInsets;
/// A reference to the imageView.
@property (nonatomic, strong) UIImageView * _Nullable imageView;
/// An ImageCardToolbarAlignment value.
@property (nonatomic) enum ToolbarAlignment toolbarAlignment;
- (void)reload;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ImageFormat, "ImageFormat") {
  ImageFormatPng = 0,
  ImageFormatJpeg = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, InterimSpacePreset, "InterimSpacePreset") {
  InterimSpacePresetNone = 0,
  InterimSpacePresetInterimSpace1 = 1,
  InterimSpacePresetInterimSpace2 = 2,
  InterimSpacePresetInterimSpace3 = 3,
  InterimSpacePresetInterimSpace4 = 4,
  InterimSpacePresetInterimSpace5 = 5,
  InterimSpacePresetInterimSpace6 = 6,
  InterimSpacePresetInterimSpace7 = 7,
  InterimSpacePresetInterimSpace8 = 8,
  InterimSpacePresetInterimSpace9 = 9,
  InterimSpacePresetInterimSpace10 = 10,
  InterimSpacePresetInterimSpace11 = 11,
  InterimSpacePresetInterimSpace12 = 12,
  InterimSpacePresetInterimSpace13 = 13,
  InterimSpacePresetInterimSpace14 = 14,
  InterimSpacePresetInterimSpace15 = 15,
  InterimSpacePresetInterimSpace16 = 16,
  InterimSpacePresetInterimSpace17 = 17,
  InterimSpacePresetInterimSpace18 = 18,
};


SWIFT_CLASS_NAMED("Layer")
@interface Layer : CAShapeLayer
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// A property that manages an image for the visualLayer’s contents
/// property. Images should not be set to the backing layer’s contents
/// property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Allows a relative subrectangle within the range of 0 to 1 to be
/// specified for the visualLayer’s contents property. This allows
/// much greater flexibility than the contentsGravity property in
/// terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;
/// A CGRect that defines a stretchable region inside the visualLayer
/// with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;
/// A floating point value that defines a ratio between the pixel
/// dimensions of the visualLayer’s contents property and the size
/// of the layer. By default, this value is set to the Screen.scale.
@property (nonatomic) CGFloat contentsScale;
/// A Preset for the contentsGravity property.
@property (nonatomic) enum Gravity contentsGravityPreset;
/// Determines how content should be aligned within the visualLayer’s bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/// A property that sets the cornerRadius of the backing layer. If the shape
/// property has a value of .circle when the cornerRadius is set, it will
/// become .none, as it no longer maintains its circle shape.
@property (nonatomic) CGFloat cornerRadius;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer the same as init(). The layer parameter is ignored
/// to avoid crashes on certain architectures.
/// \param layer Any.
///
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame;
- (void)layoutSublayers;
/// Prepares the visualLayer property.
- (void)prepareVisualLayer;
@end


@class CAAnimationGroup;

@interface Motion (SWIFT_EXTENSION(Material))
/// Creates a CAAnimationGroup.
/// \param animations An Array of CAAnimation objects.
///
/// \param timingFunction An MotionAnimationTimingFunction value.
///
/// \param duration An animation duration time for the group.
///
///
/// returns:
/// A CAAnimationGroup.
+ (CAAnimationGroup * _Nonnull)animateWithGroup:(NSArray<CAAnimation *> * _Nonnull)animations timingFunction:(enum MotionAnimationTimingFunction)timingFunction duration:(CFTimeInterval)duration SWIFT_WARN_UNUSED_RESULT;
@end






@interface Motion (SWIFT_EXTENSION(Material))
/// Creates a CABasicAnimation for the backgroundColor key path.
/// \param color A UIColor.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)backgroundWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the barTintColor key path.
/// \param color A UIColor.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)barTintWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the cornerRadius key path.
/// \param radius A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)cornerWithRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform key path.
/// \param transform A CATransform3D object.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)transformWithTransform:(CATransform3D)transform SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.rotation key path.
/// \param angle An optional CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)rotationWithAngle:(CGFloat)angle SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.rotation.x key path.
/// \param angle An optional CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)rotationXWithAngle:(CGFloat)angle SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.rotation.y key path.
/// \param angle An optional CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)rotationYWithAngle:(CGFloat)angle SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.rotation.z key path.
/// \param angle An optional CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)rotationZWithAngle:(CGFloat)angle SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.rotation key path.
/// \param rotations An optional CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)spinWithRotations:(CGFloat)rotations SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.rotation.x key path.
/// \param rotations An optional CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)spinXWithRotations:(CGFloat)rotations SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.rotation.y key path.
/// \param rotations An optional CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)spinYWithRotations:(CGFloat)rotations SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.rotation.z key path.
/// \param rotations An optional CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)spinZWithRotations:(CGFloat)rotations SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.scale key path.
/// \param to scale A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)scaleTo:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.scale.x key path.
/// \param to scale A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)scaleXTo:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.scale.y key path.
/// \param to scale A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)scaleYTo:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.scale.z key path.
/// \param to scale A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)scaleZTo:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.translation key path.
/// \param point A CGPoint.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)translateTo:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.translation.x key path.
/// \param to translation A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)translateXTo:(CGFloat)translation SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.translation.y key path.
/// \param to translation A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)translateYTo:(CGFloat)translation SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the transform.translation.z key path.
/// \param to translation A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)translateZTo:(CGFloat)translation SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the position key path.
/// \param x A CGFloat.
///
/// \param y A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)positionWithX:(CGFloat)x y:(CGFloat)y SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the position key path.
/// \param to point A CGPoint.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)positionTo:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the opacity key path.
/// \param opacity A Double.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)fadeWithOpacity:(double)opacity SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicaAnimation for the zPosition key path.
/// \param index An Int.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)zPositionWithIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicaAnimation for the width key path.
/// \param width A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)width:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicaAnimation for the height key path.
/// \param height A CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)height:(CGFloat)height SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicaAnimation for the height key path.
/// \param size A CGSize.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the shadowPath key path.
/// \param path A CGPath.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)shadowWithPath:(CGPathRef _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the shadowOffset key path.
/// \param offset CGSize.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)shadowWithOffset:(CGSize)offset SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the shadowOpacity key path.
/// \param opacity Float.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)shadowWithOpacity:(float)opacity SWIFT_WARN_UNUSED_RESULT;
/// Creates a CABasicAnimation for the shadowRadius key path.
/// \param radius CGFloat.
///
///
/// returns:
/// A CABasicAnimation.
+ (CABasicAnimation * _Nonnull)shadowWithRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MotionAnimationFillMode, "MotionAnimationFillMode") {
  MotionAnimationFillModeForwards = 0,
  MotionAnimationFillModeBackwards = 1,
  MotionAnimationFillModeBoth = 2,
  MotionAnimationFillModeRemoved = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MotionAnimationTimingFunction, "MotionAnimationTimingFunction") {
  MotionAnimationTimingFunctionDefault = 0,
  MotionAnimationTimingFunctionLinear = 1,
  MotionAnimationTimingFunctionEaseIn = 2,
  MotionAnimationTimingFunctionEaseOut = 3,
  MotionAnimationTimingFunctionEaseInEaseOut = 4,
};





@interface MotionAnimator (SWIFT_EXTENSION(Material)) <UIViewControllerAnimatedTransitioning>
/// The animation method that is used to coordinate the transition.
/// \param using transitionContext A UIViewControllerContextTransitioning.
///
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
/// Returns the transition duration time interval.
/// \param using transitionContext An optional UIViewControllerContextTransitioning.
///
///
/// returns:
/// A TimeInterval that is the total animation time including delays.
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
@end



@class UIPresentationController;

SWIFT_PROTOCOL_NAMED("MotionDelegate")
@protocol MotionDelegate
@optional
- (void)motionWithMotion:(Motion * _Nonnull)motion willTransition:(UIView * _Nonnull)fromView toView:(UIView * _Nonnull)toView;
- (void)motionWithMotion:(Motion * _Nonnull)motion didTransition:(UIView * _Nonnull)fromView toView:(UIView * _Nonnull)toView;
- (NSTimeInterval)motionDelayTransitionByTimeIntervalWithMotion:(Motion * _Nonnull)motion SWIFT_WARN_UNUSED_RESULT;
- (void)motionWillBeginPresentationWithPresentationController:(UIPresentationController * _Nonnull)presentationController;
- (void)motionAnimateAlongsideTransitionWithPresentationController:(UIPresentationController * _Nonnull)presentationController;
@end


SWIFT_CLASS("_TtC8Material28MotionPresentationController")
@interface MotionPresentationController : UIPresentationController
- (void)presentationTransitionWillBegin;
- (void)presentationTransitionDidEnd:(BOOL)completed;
- (void)dismissalTransitionWillBegin;
- (void)dismissalTransitionDidEnd:(BOOL)completed;
@property (nonatomic, readonly) CGRect frameOfPresentedViewInContainerView;
- (nonnull instancetype)initWithPresentedViewController:(UIViewController * _Nonnull)presentedViewController presentingViewController:(UIViewController * _Nullable)presentingViewController OBJC_DESIGNATED_INITIALIZER;
@end



@class UINavigationItem;

SWIFT_CLASS("_TtC8Material13NavigationBar")
@interface NavigationBar : UINavigationBar
/// Will layout the view.
@property (nonatomic, readonly) BOOL willLayout;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// A wrapper around grid.interimSpace.
@property (nonatomic) CGFloat interimSpace;
/// Grid cell factor.
@property (nonatomic) CGFloat gridFactor;
/// The back button image writes to the backIndicatorImage property and
/// backIndicatorTransitionMaskImage property.
@property (nonatomic, strong) UIImage * _Nullable backButtonImage;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)pushNavigationItem:(UINavigationItem * _Nonnull)item animated:(BOOL)animated;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


SWIFT_CLASS("_TtC8Material20NavigationController")
@interface NavigationController : UINavigationController
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with an Optional nib and bundle.
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a rootViewController.
/// \param rootViewController A UIViewController for the rootViewController.
///
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface NavigationController (SWIFT_EXTENSION(Material)) <UIGestureRecognizerDelegate>
/// Detects the gesture recognizer being used. This is necessary when using
/// NavigationDrawerController. It eliminates the conflict in panning.
/// \param gestureRecognizer A UIGestureRecognizer to detect.
///
/// \param touch The UITouch event.
///
///
/// returns:
/// A Boolean of whether to continue the gesture or not, true yes, false no.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@interface NavigationController (SWIFT_EXTENSION(Material)) <UINavigationBarDelegate>
/// Delegation method that is called when a new UINavigationItem is about to be pushed.
/// This is used to prepare the transitions between UIViewControllers on the stack.
/// \param navigationBar A UINavigationBar that is used in the NavigationController.
///
/// \param item The UINavigationItem that will be pushed on the stack.
///
///
/// returns:
/// A Boolean value that indicates whether to push the item on to the stack or not.
/// True is yes, false is no.
- (BOOL)navigationBar:(UINavigationBar * _Nonnull)navigationBar shouldPushItem:(UINavigationItem * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
@end

@protocol NavigationDrawerControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS_NAMED("NavigationDrawerController")
@interface NavigationDrawerController : RootController
/// A CGFloat property that accesses the leftView threshold of
/// the NavigationDrawerController. When the panning gesture has
/// ended, if the position is beyond the threshold,
/// the leftView is opened, if it is below the threshold, the
/// leftView is closed.
@property (nonatomic) CGFloat leftThreshold;
/// A CGFloat property that accesses the rightView threshold of
/// the NavigationDrawerController. When the panning gesture has
/// ended, if the position is beyond the threshold,
/// the rightView is closed, if it is below the threshold, the
/// rightView is opened.
@property (nonatomic) CGFloat rightThreshold;
/// A NavigationDrawerControllerDelegate property used to bind
/// the delegation object.
@property (nonatomic, weak) id <NavigationDrawerControllerDelegate> _Nullable delegate;
/// A CGFloat property that sets the animation duration of the
/// leftView when closing and opening. Defaults to 0.25.
@property (nonatomic) NSTimeInterval animationDuration;
/// A Boolean property that enables and disables the leftView from
/// opening and closing. Defaults to true.
@property (nonatomic) BOOL isEnabled;
/// A Boolean property that enables and disables the leftView from
/// opening and closing. Defaults to true.
@property (nonatomic) BOOL isLeftViewEnabled;
/// Enables the left pan gesture.
@property (nonatomic) BOOL isLeftPanGestureEnabled;
/// Enables the left tap gesture.
@property (nonatomic) BOOL isLeftTapGestureEnabled;
/// A Boolean property that enables and disables the rightView from
/// opening and closing. Defaults to true.
@property (nonatomic) BOOL isRightViewEnabled;
/// Enables the right pan gesture.
@property (nonatomic) BOOL isRightPanGestureEnabled;
/// Enables the right tap gesture.
@property (nonatomic) BOOL isRightTapGestureEnabled;
/// A Boolean property that triggers the status bar to be isHidden
/// when the leftView is opened. Defaults to true.
@property (nonatomic) BOOL isHiddenStatusBarEnabled;
/// A DepthPreset property that is used to set the depth of the
/// leftView when opened.
@property (nonatomic) enum DepthPreset depthPreset;
/// A UIView property that is used to hide and reveal the
/// leftViewController. It is very rare that this property will
/// need to be accessed externally.
@property (nonatomic, readonly, strong) UIView * _Nullable leftView;
/// A UIView property that is used to hide and reveal the
/// rightViewController. It is very rare that this property will
/// need to be accessed externally.
@property (nonatomic, readonly, strong) UIView * _Nullable rightView;
/// Indicates whether the leftView or rightView is opened.
@property (nonatomic, readonly) BOOL isOpened;
/// indicates if the leftView is opened.
@property (nonatomic, readonly) BOOL isLeftViewOpened;
/// Indicates if the rightView is opened.
@property (nonatomic, readonly) BOOL isRightViewOpened;
/// Content view controller to encompase the entire component. This is
/// primarily used when the StatusBar is being isHidden. The alpha value of
/// the rootViewController decreases, and shows the StatusBar. To avoid
/// this, and to add a isHidden transition viewController for complex
/// situations, the contentViewController was added.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;
/// A UIViewController property that references the
/// active left UIViewController.
@property (nonatomic, readonly, strong) UIViewController * _Nullable leftViewController;
/// A UIViewController property that references the
/// active right UIViewController.
@property (nonatomic, readonly, strong) UIViewController * _Nullable rightViewController;
/// A CGFloat property to access the width that the leftView
/// opens up to.
@property (nonatomic, readonly) CGFloat leftViewWidth;
/// A CGFloat property to access the width that the rightView
/// opens up to.
@property (nonatomic, readonly) CGFloat rightViewWidth;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with an Optional nib and bundle.
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// An initializer for the NavigationDrawerController.
/// \param rootViewController The main UIViewController.
///
/// \param leftViewController An Optional left UIViewController.
///
/// \param rightViewController An Optional right UIViewController.
///
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController leftViewController:(UIViewController * _Nullable)leftViewController rightViewController:(UIViewController * _Nullable)rightViewController OBJC_DESIGNATED_INITIALIZER;
- (void)transitionTo:(UIViewController * _Nonnull)viewController duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// Layout subviews.
- (void)layoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
/// A method that is used to set the width of the leftView when
/// opened. This is the recommended method of setting the leftView
/// width.
/// \param width A CGFloat value to set as the new width.
///
/// \param isHidden A Boolean value of whether the leftView
/// should be isHidden after the width has been updated or not.
///
/// \param animated A Boolean value that indicates to animate
/// the leftView width change.
///
- (void)setLeftViewWidthWithWidth:(CGFloat)width isHidden:(BOOL)isHidden animated:(BOOL)animated duration:(NSTimeInterval)duration;
/// A method that is used to set the width of the rightView when
/// opened. This is the recommended method of setting the rightView
/// width.
/// \param width A CGFloat value to set as the new width.
///
/// \param isHidden A Boolean value of whether the rightView
/// should be isHidden after the width has been updated or not.
///
/// \param animated A Boolean value that indicates to animate
/// the rightView width change.
///
- (void)setRightViewWidthWithWidth:(CGFloat)width isHidden:(BOOL)isHidden animated:(BOOL)animated duration:(NSTimeInterval)duration;
/// A method that toggles the leftView opened if previously closed,
/// or closed if previously opened.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)toggleLeftViewWithVelocity:(CGFloat)velocity;
/// A method that toggles the rightView opened if previously closed,
/// or closed if previously opened.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)toggleRightViewWithVelocity:(CGFloat)velocity;
/// A method that opens the leftView.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)openLeftViewWithVelocity:(CGFloat)velocity;
/// A method that opens the rightView.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)openRightViewWithVelocity:(CGFloat)velocity;
/// A method that closes the leftView.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)closeLeftViewWithVelocity:(CGFloat)velocity;
/// A method that closes the rightView.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)closeRightViewWithVelocity:(CGFloat)velocity;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end


@interface NavigationDrawerController (SWIFT_EXTENSION(Material)) <UIGestureRecognizerDelegate>
/// Detects the gesture recognizer being used.
/// \param gestureRecognizer A UIGestureRecognizer to detect.
///
/// \param touch The UITouch event.
///
///
/// returns:
/// A Boolean of whether to continue the gesture or not.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end



enum NavigationDrawerPosition : NSInteger;

SWIFT_PROTOCOL_NAMED("NavigationDrawerControllerDelegate")
@protocol NavigationDrawerControllerDelegate
@optional
/// An optional delegation method that is fired before the
/// NavigationDrawerController opens.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController willOpen:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired after the
/// NavigationDrawerController opened.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didOpen:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired before the
/// NavigationDrawerController closes.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController willClose:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired after the
/// NavigationDrawerController closed.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didClose:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// NavigationDrawerController pan gesture begins.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param didBeginPanAt point A CGPoint.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didBeginPanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// NavigationDrawerController pan gesture changes position.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param didChangePanAt point A CGPoint.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didChangePanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// NavigationDrawerController pan gesture ends.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param didEndPanAt point A CGPoint.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didEndPanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// NavigationDrawerController tap gesture executes.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param didTapAt point A CGPoint.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didTapAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// status bar is about to change display, isHidden or not.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param statusBar isHidden A boolean.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController statusBar:(BOOL)isHidden;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NavigationDrawerPosition, "NavigationDrawerPosition") {
  NavigationDrawerPositionLeft = 0,
  NavigationDrawerPositionRight = 1,
};


SWIFT_CLASS("_TtC8Material14NavigationItem")
@interface NavigationItem : NSObject
/// Should center the contentView.
@property (nonatomic) enum ContentViewAlignment contentViewAlignment;
/// Back Button.
@property (nonatomic, readonly, strong) IconButton * _Nonnull backButton;
/// Content View.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// Title label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// Detail label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// Left items.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/// Right items.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
/// Center items.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull centerViews;
@property (nonatomic, readonly, strong) NavigationBar * _Nullable navigationBar;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol TabBarDelegate;
enum TabBarLineAlignment : NSInteger;

SWIFT_CLASS("_TtC8Material6TabBar")
@interface TabBar : Bar
/// A boolean indicating if the TabBar line is in an animation state.
@property (nonatomic, readonly) BOOL isAnimating;
/// A delegation reference.
@property (nonatomic, weak) id <TabBarDelegate> _Nullable delegate;
/// The currently selected button.
@property (nonatomic, readonly, strong) UIButton * _Nullable selected;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// A wrapper around contentView.grid.interimSpace.
@property (nonatomic) CGFloat interimSpace;
/// Buttons.
@property (nonatomic, copy) NSArray<UIButton *> * _Nonnull buttons;
/// A boolean to animate the line when touched.
@property (nonatomic) BOOL isLineAnimated;
/// A reference to the line UIView.
@property (nonatomic, readonly, strong) UIView * _Nonnull line;
/// The line color.
@property (nonatomic, strong) UIColor * _Nullable lineColor;
/// A value for the line alignment.
@property (nonatomic) enum TabBarLineAlignment lineAlignment;
/// The line height.
@property (nonatomic) CGFloat lineHeight;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material10PageTabBar")
@interface PageTabBar : TabBar
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PageTabBarAlignment, "PageTabBarAlignment") {
  PageTabBarAlignmentTop = 0,
  PageTabBarAlignmentBottom = 1,
};

@protocol PageTabBarControllerDelegate;
@class UIPageViewController;
@class UIScrollView;

SWIFT_CLASS_NAMED("PageTabBarController")
@interface PageTabBarController : RootController
/// Reference to the PageTabBar.
@property (nonatomic, readonly, strong) PageTabBar * _Nonnull pageTabBar;
/// A boolean that indicates whether bounce is enabled.
@property (nonatomic) BOOL isBounceEnabled;
/// Indicates that the tab has been pressed and animating.
@property (nonatomic, readonly) BOOL isTabSelectedAnimation;
/// The currently selected UIViewController.
@property (nonatomic) NSInteger selectedIndex;
/// PageTabBar alignment setting.
@property (nonatomic) enum PageTabBarAlignment pageTabBarAlignment;
/// Delegation handler.
@property (nonatomic, weak) id <PageTabBarControllerDelegate> _Nullable delegate;
/// A reference to the instance when it is a UIPageViewController.
@property (nonatomic, readonly, strong) UIPageViewController * _Nullable pageViewController;
/// A reference to the scrollView.
@property (nonatomic, readonly, strong) UIScrollView * _Nullable scrollView;
/// A reference to the UIViewControllers.
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull viewControllers;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers selectedIndex:(NSInteger)index OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// Sets the view controllers.
/// <ul>
///   <li>
///     _ viewController: An Array of UIViewControllers.
///   </li>
/// </ul>
/// \param direction A UIPageViewControllerNavigationDirection enum value.
///
/// \param animated A boolean indicating to include animation.
///
/// \param completion An optional completion block.
///
- (void)setViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers direction:(UIPageViewControllerNavigationDirection)direction animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (void)prepareRootViewController;
/// Prepares the pageTabBarItems.
- (void)preparePageTabBarItems;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end








@interface PageTabBarController (SWIFT_EXTENSION(Material)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface PageTabBarController (SWIFT_EXTENSION(Material)) <UIPageViewControllerDelegate>
- (void)pageViewController:(UIPageViewController * _Nonnull)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray<UIViewController *> * _Nonnull)previousViewControllers transitionCompleted:(BOOL)completed;
@end


@interface PageTabBarController (SWIFT_EXTENSION(Material)) <UIPageViewControllerDataSource>
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("PageTabBarControllerDelegate")
@protocol PageTabBarControllerDelegate
@optional
/// A delegation method that is executed when a UIViewController did transition to.
/// \param pageTabBarController A PageTabBarController.
///
/// \param willTransitionTo viewController A UIViewController.
///
- (void)pageTabBarControllerWithPageTabBarController:(PageTabBarController * _Nonnull)pageTabBarController didTransitionTo:(UIViewController * _Nonnull)viewController;
@end


SWIFT_CLASS("_TtC8Material14PageTabBarItem")
@interface PageTabBarItem : FlatButton
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material13PresenterCard")
@interface PresenterCard : Card
/// A preset wrapper around presenterViewEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset presenterViewEdgeInsetsPreset;
/// A reference to presenterViewEdgeInsets.
@property (nonatomic) UIEdgeInsets presenterViewEdgeInsets;
/// A reference to the presenterView.
@property (nonatomic, strong) UIView * _Nullable presenterView;
- (void)reload;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material16PresentingMotion")
@interface PresentingMotion : Motion
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsPresenting:(BOOL)isPresenting isContainer:(BOOL)isContainer OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PulseAnimation, "PulseAnimation") {
  PulseAnimationNone = 0,
  PulseAnimationCenter = 1,
  PulseAnimationCenterWithBacking = 2,
  PulseAnimationCenterRadialBeyondBounds = 3,
  PulseAnimationRadialBeyondBounds = 4,
  PulseAnimationBacking = 5,
  PulseAnimationPoint = 6,
  PulseAnimationPointWithBacking = 7,
};





SWIFT_CLASS("_TtC8Material12RaisedButton")
@interface RaisedButton : Button
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end




@protocol SearchBarDelegate;

SWIFT_CLASS("_TtC8Material9SearchBar")
@interface SearchBar : Bar
/// The UITextField for the searchBar.
@property (nonatomic, readonly, strong) UITextField * _Nonnull textField;
/// Reference to the clearButton.
@property (nonatomic, readonly, strong) IconButton * _Null_unspecified clearButton;
/// A reference to the delegate.
@property (nonatomic, weak) id <SearchBarDelegate> _Nullable delegate;
/// Handle the clearButton manually.
@property (nonatomic) BOOL isClearButtonAutoHandleEnabled;
/// TintColor for searchBar.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// TextColor for searchBar.
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// Sets the textField placeholder value.
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// Placeholder text
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end




@interface SearchBar (SWIFT_EXTENSION(Material))
/// Layout the clearButton.
- (void)layoutClearButton;
/// Layout the leftView.
- (void)layoutLeftView;
@end




SWIFT_CLASS("_TtC8Material19StatusBarController")
@interface StatusBarController : RootController
/// A Display value to indicate whether or not to
/// display the rootViewController to the full view
/// bounds, or up to the toolbar height.
@property (nonatomic) enum Display statusBarDisplay;
/// Device status bar style.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// Device visibility state.
@property (nonatomic) BOOL isStatusBarHidden;
/// A boolean that indicates to hide the statusBar on rotation.
@property (nonatomic) BOOL shouldHideStatusBarOnRotation;
/// A reference to the statusBar.
@property (nonatomic, readonly, strong) UIView * _Nonnull statusBar;
/// To execute in the order of the layout chain, override this
/// method. LayoutSubviews should be called immediately, unless you
/// have a certain need.
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material19SearchBarController")
@interface SearchBarController : StatusBarController
/// A Display value to indicate whether or not to
/// display the rootViewController to the full view
/// bounds, or up to the searchBar height.
@property (nonatomic) enum Display searchBarDisplay;
/// Reference to the SearchBar.
@property (nonatomic, readonly, strong) SearchBar * _Nonnull searchBar;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_PROTOCOL_NAMED("SearchBarDelegate")
@protocol SearchBarDelegate
@optional
/// A delegation method that is executed when the textField changed.
/// \param searchBar A SearchBar.
///
/// \param didChange textField A UITextField.
///
/// \param with text An optional String.
///
- (void)searchBarWithSearchBar:(SearchBar * _Nonnull)searchBar didChange:(UITextField * _Nonnull)textField with:(NSString * _Nullable)text;
/// A delegation method that is executed when the textField will clear.
/// \param searchBar A SearchBar.
///
/// \param willClear textField A UITextField.
///
/// \param with text An optional String.
///
- (void)searchBarWithSearchBar:(SearchBar * _Nonnull)searchBar willClear:(UITextField * _Nonnull)textField with:(NSString * _Nullable)text;
/// A delegation method that is executed when the textField is cleared.
/// \param searchBar A SearchBar.
///
/// \param didClear textField A UITextField.
///
/// \param with text An optional String.
///
- (void)searchBarWithSearchBar:(SearchBar * _Nonnull)searchBar didClear:(UITextField * _Nonnull)textField with:(NSString * _Nullable)text;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ShapePreset, "ShapePreset") {
  ShapePresetNone = 0,
  ShapePresetSquare = 1,
  ShapePresetCircle = 2,
};

enum SnackbarStatus : NSInteger;

SWIFT_CLASS("_TtC8Material8Snackbar")
@interface Snackbar : Bar
/// A convenience property to set the titleLabel text.
@property (nonatomic, copy) NSString * _Nullable text;
/// Text label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull textLabel;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// The status of the snackbar.
@property (nonatomic, readonly) enum SnackbarStatus status;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Reloads the view.
- (void)reload;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SnackbarAlignment, "SnackbarAlignment") {
  SnackbarAlignmentTop = 0,
  SnackbarAlignmentBottom = 1,
};

@protocol SnackbarControllerDelegate;

SWIFT_CLASS("_TtC8Material18SnackbarController")
@interface SnackbarController : RootController
/// Reference to the Snackbar.
@property (nonatomic, readonly, strong) Snackbar * _Nonnull snackbar;
/// A boolean indicating if the Snacbar is animating.
@property (nonatomic, readonly) BOOL isAnimating;
/// Delegation handler.
@property (nonatomic, weak) id <SnackbarControllerDelegate> _Nullable delegate;
/// Snackbar alignment setting.
@property (nonatomic) enum SnackbarAlignment snackbarAlignment;
/// A preset wrapper around snackbarEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset snackbarEdgeInsetsPreset;
/// A reference to snackbarEdgeInsets.
@property (nonatomic) UIEdgeInsets snackbarEdgeInsets;
/// Animates to a SnackbarStatus.
/// \param status A SnackbarStatus enum value.
///
- (void (^ _Nullable)(BOOL))animateWithSnackbar:(enum SnackbarStatus)status delay:(NSTimeInterval)delay animations:(void (^ _Nullable)(Snackbar * _Nonnull))animations completion:(void (^ _Nullable)(Snackbar * _Nonnull))completion;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)layoutSubviews;
/// Reloads the view.
- (void)reload;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("SnackbarControllerDelegate")
@protocol SnackbarControllerDelegate
@optional
/// A delegation method that is executed when a Snackbar will show.
/// \param snackbarController A SnackbarController.
///
/// \param snackbar A Snackbar.
///
- (void)snackbarControllerWithSnackbarController:(SnackbarController * _Nonnull)snackbarController willShow:(Snackbar * _Nonnull)snackbar;
/// A delegation method that is executed when a Snackbar did show.
/// \param snackbarController A SnackbarController.
///
/// \param snackbar A Snackbar.
///
- (void)snackbarControllerWithSnackbarController:(SnackbarController * _Nonnull)snackbarController didShow:(Snackbar * _Nonnull)snackbar;
/// A delegation method that is executed when a Snackbar will hide.
/// \param snackbarController A SnackbarController.
///
/// \param snackbar A Snackbar.
///
- (void)snackbarControllerWithSnackbarController:(SnackbarController * _Nonnull)snackbarController willHide:(Snackbar * _Nonnull)snackbar;
/// A delegation method that is executed when a Snackbar did hide.
/// \param snackbarController A SnackbarController.
///
/// \param snackbar A Snackbar.
///
- (void)snackbarControllerWithSnackbarController:(SnackbarController * _Nonnull)snackbarController didHide:(Snackbar * _Nonnull)snackbar;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SnackbarStatus, "SnackbarStatus") {
  SnackbarStatusVisible = 0,
  SnackbarStatusHidden = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SpringDirection, "SpringDirection") {
  SpringDirectionUp = 0,
  SpringDirectionDown = 1,
  SpringDirectionLeft = 2,
  SpringDirectionRight = 3,
};




@protocol SwitchDelegate;
enum SwitchState : NSInteger;
enum SwitchStyle : NSInteger;
enum SwitchSize : NSInteger;

SWIFT_CLASS("_TtC8Material6Switch")
@interface Switch : UIControl
/// Will layout the view.
@property (nonatomic, readonly) BOOL willLayout;
/// An Optional delegation method.
@property (nonatomic, weak) id <SwitchDelegate> _Nullable delegate;
/// Indicates if the animation should bounce.
@property (nonatomic) BOOL isBounceable;
/// Button on color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOnColor;
/// Button off color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOffColor;
/// Track on color.
@property (nonatomic, strong) UIColor * _Nonnull trackOnColor;
/// Track off color.
@property (nonatomic, strong) UIColor * _Nonnull trackOffColor;
/// Button on disabled color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOnDisabledColor;
/// Track on disabled color.
@property (nonatomic, strong) UIColor * _Nonnull trackOnDisabledColor;
/// Button off disabled color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOffDisabledColor;
/// Track off disabled color.
@property (nonatomic, strong) UIColor * _Nonnull trackOffDisabledColor;
/// Track view reference.
@property (nonatomic, readonly, strong) UIView * _Nonnull track;
/// Button view reference.
@property (nonatomic, readonly, strong) FABButton * _Nonnull button;
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// A boolean indicating if the switch is on or not.
@property (nonatomic) BOOL isOn;
/// Switch state.
@property (nonatomic) enum SwitchState switchState;
/// Switch style.
@property (nonatomic) enum SwitchStyle switchStyle;
/// Switch size.
@property (nonatomic) enum SwitchSize switchSize;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init(state:style:size:) initializer, or set the CGRect
/// to CGRectNull.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// An initializer that sets the state, style, and size of the Switch instance.
/// \param state A SwitchState value.
///
/// \param style A SwitchStyle value.
///
/// \param size A SwitchSize value.
///
- (nonnull instancetype)initWithState:(enum SwitchState)state style:(enum SwitchStyle)style size:(enum SwitchSize)size OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// Reloads the view.
- (void)reload;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
/// Toggle the Switch state, if On will be Off, and if Off will be On.
/// \param completion An Optional completion block.
///
- (void)toggleWithCompletion:(void (^ _Nullable)(Switch * _Nonnull))completion;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end




@interface Switch (SWIFT_EXTENSION(Material))
/// Set the switchState property with an option to animate.
/// \param state The SwitchState to set.
///
/// \param animated A Boolean indicating to set the animation or not.
///
/// \param completion An Optional completion block.
///
- (void)setSwitchStateWithState:(enum SwitchState)state animated:(BOOL)animated completion:(void (^ _Nullable)(Switch * _Nonnull))completion;
@end








SWIFT_PROTOCOL_NAMED("SwitchDelegate")
@protocol SwitchDelegate
/// A Switch delegate method for state changes.
/// \param control Switch control.
///
/// \param state SwitchState value.
///
- (void)switchDidChangeStateWithControl:(Switch * _Nonnull)control state:(enum SwitchState)state;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchSize, "SwitchSize") {
  SwitchSizeSmall = 0,
  SwitchSizeMedium = 1,
  SwitchSizeLarge = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchState, "SwitchState") {
  SwitchStateOn = 0,
  SwitchStateOff = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchStyle, "SwitchStyle") {
  SwitchStyleLight = 0,
  SwitchStyleDark = 1,
};





@interface TabBar (SWIFT_EXTENSION(Material))
/// Selects a given index from the buttons array.
/// <ul>
///   <li>
///     Paramater completion: An optional completion block.
///   </li>
/// </ul>
/// \param at index An Int.
///
- (void)selectAt:(NSInteger)index completion:(void (^ _Nullable)(UIButton * _Nonnull))completion;
/// Animates to a given button.
/// \param to button A UIButton.
///
/// \param completion An optional completion block.
///
- (void)animateTo:(UIButton * _Nonnull)button completion:(void (^ _Nullable)(UIButton * _Nonnull))completion;
@end




SWIFT_PROTOCOL_NAMED("TabBarDelegate")
@protocol TabBarDelegate
@optional
/// A delegation method that is executed when the button will trigger the
/// animation to the next tab.
/// \param tabBar A TabBar.
///
/// \param button A UIButton.
///
- (void)tabBarWithTabBar:(TabBar * _Nonnull)tabBar willSelect:(UIButton * _Nonnull)button;
/// A delegation method that is executed when the button did complete the
/// animation to the next tab.
/// \param tabBar A TabBar.
///
/// \param button A UIButton.
///
- (void)tabBarWithTabBar:(TabBar * _Nonnull)tabBar didSelect:(UIButton * _Nonnull)button;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TabBarLineAlignment, "TabBarLineAlignment") {
  TabBarLineAlignmentTop = 0,
  TabBarLineAlignmentBottom = 1,
};


SWIFT_CLASS("_TtC8Material9TableView")
@interface TableView : UITableView
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material13TableViewCell")
@interface TableViewCell : UITableViewCell
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object.
/// \param style A UITableViewCellStyle enum.
///
/// \param reuseIdentifier A String identifier.
///
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Null_unspecified)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end






SWIFT_CLASS("_TtC8Material19TableViewController")
@interface TableViewController : UIViewController
/// A reference to a Reminder.
@property (nonatomic, readonly, strong) TableView * _Nonnull tableView;
- (void)viewDidLoad;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepareView method
/// to initialize property values and other setup operations.
/// The super.prepareView method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TableViewController (SWIFT_EXTENSION(Material)) <UITableViewDelegate>
@end




@interface TableViewController (SWIFT_EXTENSION(Material)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end













SWIFT_PROTOCOL_NAMED("TextFieldDelegate")
@protocol TextFieldDelegate <UITextFieldDelegate>
@optional
/// A delegation method that is executed when the textField changed.
/// \param textField A UITextField.
///
/// \param didChange text An optional String.
///
- (void)textFieldWithTextField:(UITextField * _Nonnull)textField didChange:(NSString * _Nullable)text;
/// A delegation method that is executed when the textField will clear.
/// \param textField A UITextField.
///
/// \param willClear text An optional String.
///
- (void)textFieldWithTextField:(UITextField * _Nonnull)textField willClear:(NSString * _Nullable)text;
/// A delegation method that is executed when the textField is cleared.
/// \param textField A UITextField.
///
/// \param didClear text An optional String.
///
- (void)textFieldWithTextField:(UITextField * _Nonnull)textField didClear:(NSString * _Nullable)text;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TextFieldPlaceholderAnimation, "TextFieldPlaceholderAnimation") {
  TextFieldPlaceholderAnimationDefault = 0,
  TextFieldPlaceholderAnimationHidden = 1,
};

@class NSRegularExpression;
@class NSDictionary;
@class NSAttributedString;

SWIFT_CLASS("_TtC8Material11TextStorage")
@interface TextStorage : NSTextStorage
/// A storage facility for attributed text.
@property (nonatomic, readonly, strong) NSMutableAttributedString * _Nonnull storage;
/// The regular expression to match text fragments against.
@property (nonatomic, strong) NSRegularExpression * _Nullable expression;
/// Initializer.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFileURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithData:(NSData * _Nonnull)data options:(NSDictionary<NSString *, id> * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)str SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)str attributes:(NSDictionary<NSString *, id> * _Nullable)attrs SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAttributedString:(NSAttributedString * _Nonnull)attrStr SWIFT_UNAVAILABLE;
@end


@interface TextStorage (SWIFT_EXTENSION(Material))
/// A String value of the attirbutedString property.
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
/// Processes the text when editing.
- (void)processEditing;
/// Returns the attributes for the character at a given index.
/// \param location An Int
///
/// \param effectiveRange range Upon return, the range over which the
/// attributes and values are the same as those at index. This range
/// isn’t necessarily the maximum range covered, and its extent is
/// implementation-dependent. If you need the maximum range, use
/// attributesAtIndex:longestEffectiveRange:inRange:.
/// If you don’t need this value, pass NULL.
///
///
/// returns:
/// The attributes for the character at index.
- (NSDictionary<NSString *, id> * _Nonnull)attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range SWIFT_WARN_UNUSED_RESULT;
/// Replaces a range of text with a string value.
/// \param range The character range to replace.
///
/// \param str The string value that the characters
/// will be replaced with.
///
- (void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)str;
/// Sets the attributedString attribute values.
/// \param attrs The attributes to set.
///
/// \param range A range of characters that will have their
/// attributes updated.
///
- (void)setAttributes:(NSDictionary<NSString *, id> * _Nullable)attrs range:(NSRange)range;
/// Adds an individual attribute.
/// <ul>
///   <li>
///     _ name: Attribute name.
///   </li>
/// </ul>
/// \param value An Any type.
///
/// \param range A range of characters that will have their
/// attributes added.
///
- (void)addAttribute:(NSString * _Nonnull)name value:(id _Nonnull)value range:(NSRange)range;
/// Removes an individual attribute.
/// <ul>
///   <li>
///     _ name: Attribute name.
///   </li>
/// </ul>
/// \param range A range of characters that will have their
/// attributes removed.
///
- (void)removeAttribute:(NSString * _Nonnull)name range:(NSRange)range;
@end

@class NSTextCheckingResult;

SWIFT_PROTOCOL_NAMED("TextStorageDelegate")
@protocol TextStorageDelegate <NSTextStorageDelegate>
@optional
/// A delegation method that is executed when text will be
/// processed during editing.
/// \param textStorage A TextStorage.
///
/// \param willProcessEditing text A String.
///
/// \param range A NSRange.
///
- (void)textStorageWithTextStorage:(TextStorage * _Nonnull)textStorage willProcessEditing:(NSString * _Nonnull)text range:(NSRange)range;
/// A delegation method that is executed when text has been
/// processed after editing.
/// \param textStorage A TextStorage.
///
/// \param didProcessEditing text A String.
///
/// \param result An optional NSTextCheckingResult.
///
/// \param flags NSRegularExpression.MatchingFlags.
///
/// \param top An UnsafeMutablePointer<ObjCBool>.
///
- (void)textStorageWithTextStorage:(TextStorage * _Nonnull)textStorage didProcessEditing:(NSString * _Nonnull)text result:(NSTextCheckingResult * _Nullable)result flags:(NSMatchingFlags)flags stop:(BOOL * _Nonnull)stop;
@end

@class NSTextContainer;

SWIFT_CLASS_NAMED("TextView")
@interface TextView : UITextView
/// A boolean indicating whether the text is empty.
@property (nonatomic, readonly) BOOL isEmpty;
/// A boolean indicating whether the text is in edit mode.
@property (nonatomic, readonly) BOOL isEditing;
/// Is the keyboard hidden.
@property (nonatomic, readonly) BOOL isKeyboardHidden;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The placeholderLabel font value.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The placeholderLabel text value.
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// The placeholder UILabel.
@property (nonatomic, readonly, strong) UILabel * _Nonnull placeholderLabel;
/// Placeholder normal text
@property (nonatomic, strong) UIColor * _Nonnull placeholderNormalColor;
/// Placeholder active text
@property (nonatomic, strong) UIColor * _Nonnull placeholderActiveColor;
/// NSTextContainer EdgeInsets preset property.
@property (nonatomic) enum EdgeInsetsPreset textContainerInsetsPreset;
/// NSTextContainer EdgeInsets property.
@property (nonatomic) UIEdgeInsets textContainerInsets;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The string pattern to match within the textStorage.
@property (nonatomic, copy) NSString * _Nonnull pattern;
/// A reference to the textView text.
@property (nonatomic, copy) NSString * _Null_unspecified text;
/// A convenience property that accesses the textStorage
/// string.
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
/// An Array of matches that match the pattern expression.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull matches;
/// An Array of unique matches that match the pattern
/// expression.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull uniqueMatches;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
/// \param textContainer A NSTextContainer instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer that is mostly used with AutoLayout.
/// \param textContainer A NSTextContainer instance.
///
- (nonnull instancetype)initWithTextContainer:(NSTextContainer * _Nullable)textContainer;
/// A convenience initializer that constructs all aspects of the textView.
- (nonnull instancetype)init;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end






@interface TextView (SWIFT_EXTENSION(Material)) <TextStorageDelegate>
- (void)textStorageWithTextStorage:(TextStorage * _Nonnull)textStorage willProcessEditing:(NSString * _Nonnull)text range:(NSRange)range;
- (void)textStorageWithTextStorage:(TextStorage * _Nonnull)textStorage didProcessEditing:(NSString * _Nonnull)text result:(NSTextCheckingResult * _Nullable)result flags:(NSMatchingFlags)flags stop:(BOOL * _Nonnull)stop;
@end





@class NSValue;

SWIFT_PROTOCOL_NAMED("TextViewDelegate")
@protocol TextViewDelegate <UITextViewDelegate>
@optional
/// A delegation method that is executed when the keyboard will open.
/// \param textView A TextView.
///
/// \param willShowKeyboard value A NSValue.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView willShowKeyboard:(NSValue * _Nonnull)value;
/// A delegation method that is executed when the keyboard will close.
/// \param textView A TextView.
///
/// \param willHideKeyboard value A NSValue.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView willHideKeyboard:(NSValue * _Nonnull)value;
/// A delegation method that is executed when the keyboard did open.
/// \param textView A TextView.
///
/// \param didShowKeyboard value A NSValue.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView didShowKeyboard:(NSValue * _Nonnull)value;
/// A delegation method that is executed when the keyboard did close.
/// \param textView A TextView.
///
/// \param didHideKeyboard value A NSValue.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView didHideKeyboard:(NSValue * _Nonnull)value;
/// A delegation method that is executed when text will be
/// processed during editing.
/// \param textView A TextView.
///
/// \param willProcessEditing textStorage A TextStorage.
///
/// \param text A String.
///
/// \param range A NSRange.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView willProcessEditing:(TextStorage * _Nonnull)textStorage text:(NSString * _Nonnull)text range:(NSRange)range;
/// A delegation method that is executed when text has been
/// processed after editing.
/// \param textView A TextView.
///
/// \param didProcessEditing textStorage A TextStorage.
///
/// \param text A String.
///
/// \param range A NSRange.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView didProcessEditing:(TextStorage * _Nonnull)textStorage text:(NSString * _Nonnull)text range:(NSRange)range;
@end


SWIFT_CLASS("_TtC8Material7Toolbar")
@interface Toolbar : Bar
/// A convenience property to set the titleLabel.text.
@property (nonatomic, copy) NSString * _Nullable title;
/// Title label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// A convenience property to set the detailLabel.text.
@property (nonatomic, copy) NSString * _Nullable detail;
/// Detail label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// Reloads the view.
- (void)reload;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end



typedef SWIFT_ENUM_NAMED(NSInteger, ToolbarAlignment, "ToolbarAlignment") {
  ToolbarAlignmentTop = 0,
  ToolbarAlignmentBottom = 1,
};

@protocol ToolbarControllerDelegate;

SWIFT_CLASS_NAMED("ToolbarController")
@interface ToolbarController : StatusBarController
/// A Display value to indicate whether or not to
/// display the rootViewController to the full view
/// bounds, or up to the toolbar height.
@property (nonatomic) enum Display toolbarDisplay;
/// Reference to the Toolbar.
@property (nonatomic, readonly, strong) Toolbar * _Nonnull toolbar;
/// Delegation handler.
@property (nonatomic, weak) id <ToolbarControllerDelegate> _Nullable delegate;
/// A floating UIViewController.
@property (nonatomic, strong) UIViewController * _Nullable floatingViewController;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_PROTOCOL_NAMED("ToolbarControllerDelegate")
@protocol ToolbarControllerDelegate
@optional
/// Delegation method that executes when the floatingViewController will open.
- (void)toolbarControllerWillOpenFloatingViewControllerWithToolbarController:(ToolbarController * _Nonnull)toolbarController;
/// Delegation method that executes when the floatingViewController will close.
- (void)toolbarControllerWillCloseFloatingViewControllerWithToolbarController:(ToolbarController * _Nonnull)toolbarController;
/// Delegation method that executes when the floatingViewController did open.
- (void)toolbarControllerDidOpenFloatingViewControllerWithToolbarController:(ToolbarController * _Nonnull)toolbarController;
/// Delegation method that executes when the floatingViewController did close.
- (void)toolbarControllerDidCloseFloatingViewControllerWithToolbarController:(ToolbarController * _Nonnull)toolbarController;
@end


@interface UIFont (SWIFT_EXTENSION(Material))
/// Calculates a CGSize value based on a width and length of a string with a
/// given UIFont.
/// <ul>
///   <li>
///     Returns a CGSize.
///   </li>
/// </ul>
/// \param string A String.
///
/// \param constrainedTo width A CGFloat.
///
- (CGSize)stringSizeWithString:(NSString * _Nonnull)string constrainedTo:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Crops an image to a specified width and height.
/// \param toWidth tw A specified width.
///
/// \param toHeight th A specified height.
///
///
/// returns:
/// An optional UIImage.
- (UIImage * _Nullable)cropToWidth:(CGFloat)tw toHeight:(CGFloat)th SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Creates a clear image.
///
/// returns:
/// A UIImage that is clear.
+ (UIImage * _Nullable)clearWithSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Creates an Image that is a color.
/// \param color The UIColor to create the image from.
///
/// \param size The size of the image to create.
///
///
/// returns:
/// A UIImage that is the color passed in.
+ (UIImage * _Nullable)imageWith:(UIColor * _Nonnull)color size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Adjusts the orientation of the image from the capture orientation.
/// This is an issue when taking images, the capture orientation is not set correctly
/// when using Portrait.
///
/// returns:
/// An optional UIImage if successful.
- (UIImage * _Nullable)adjustOrientation SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Applies a blur effect to a UIImage.
/// \param radius The radius of the blur effect.
///
/// \param tintColor The color used for the blur effect (optional).
///
/// \param saturationDeltaFactor The delta factor for the saturation of the blur effect.
///
///
/// returns:
/// a UIImage.
- (UIImage * _Nullable)blurWithRadius:(CGFloat)radius tintColor:(UIColor * _Nullable)tintColor saturationDeltaFactor:(CGFloat)saturationDeltaFactor SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Creates a new image with the passed in color.
/// \param color The UIColor to create the image from.
///
///
/// returns:
/// A UIImage that is the color passed in.
- (UIImage * _Nullable)tintWith:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Asynchronously load images with a completion block.
/// \param URL A URL destination to fetch the image from.
///
/// \param completion A completion block that is executed once the image
/// has been retrieved.
///
+ (void)contentsOfURLWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Resizes an image based on a given width.
/// \param toWidth w A width value.
///
///
/// returns:
/// An optional UIImage.
- (UIImage * _Nullable)resizeToWidth:(CGFloat)w SWIFT_WARN_UNUSED_RESULT;
/// Resizes an image based on a given height.
/// \param toHeight h A height value.
///
///
/// returns:
/// An optional UIImage.
- (UIImage * _Nullable)resizeToHeight:(CGFloat)h SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Width of the UIImage.
@property (nonatomic, readonly) CGFloat width;
/// Height of the UIImage.
@property (nonatomic, readonly) CGFloat height;
@end


@interface UINavigationController (SWIFT_EXTENSION(Material))
/// Device status bar style.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@end


@interface UINavigationItem (SWIFT_EXTENSION(Material))
/// NavigationItem reference.
@property (nonatomic, readonly, strong) NavigationItem * _Nonnull navigationItem;
/// Should center the contentView.
@property (nonatomic) enum ContentViewAlignment contentViewAlignment;
/// Content View.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// Back Button.
@property (nonatomic, readonly, strong) IconButton * _Nonnull backButton;
/// Title Label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// Detail text.
@property (nonatomic, copy) NSString * _Nullable detail;
/// Detail Label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// Left side UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/// Right side UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
/// Center UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull centerViews;
@end


@interface UITabBarItem (SWIFT_EXTENSION(Material))
/// Sets the color of the title color for a state.
- (void)setTitleColorWithColor:(UIColor * _Nonnull)color forState:(UIControlState)state;
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// Snapshots the view instance for animations during transitions.
/// \param afterUpdates A boolean indicating whether to snapshot the view
/// after a render update, or as is.
///
/// \param shouldHide A boolean indicating whether the view should be hidden
/// after the snapshot is taken.
///
///
/// returns:
/// A UIView instance that is a snapshot of the given UIView.
- (UIView * _Nonnull)transitionSnapshotAfterUpdates:(BOOL)afterUpdates shouldHide:(BOOL)shouldHide SWIFT_WARN_UNUSED_RESULT;
@end




@interface UIView (SWIFT_EXTENSION(Material))
/// A reference to grid’s layoutEdgeInsetsPreset.
@property (nonatomic) enum EdgeInsetsPreset layoutEdgeInsetsPreset;
/// A reference to grid’s layoutEdgeInsets.
@property (nonatomic) UIEdgeInsets layoutEdgeInsets;
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// An identifier value used to connect views across UIViewControllers.
@property (nonatomic, copy) NSString * _Nonnull motionIdentifier;
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// Computes the rotation of the view.
@property (nonatomic) CGFloat motionRotationAngle;
/// The global position of a view.
@property (nonatomic, readonly) CGPoint motionPosition;
/// The layer.transform of a view.
@property (nonatomic) CATransform3D motionTransform;
/// Computes the scale X axis value of the view.
@property (nonatomic, readonly) CGFloat motionScaleX;
/// Computes the scale Y axis value of the view.
@property (nonatomic, readonly) CGFloat motionScaleY;
/// A function that accepts an Array of CAAnimation objects and executes
/// them on the view’s backing layer.
/// \param animations An Array of CAAnimations.
///
- (void)animate:(NSArray<CAAnimation *> * _Nonnull)animations;
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// A preset wrapper around divider.contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset dividerContentEdgeInsetsPreset;
/// A reference to divider.contentEdgeInsets.
@property (nonatomic) UIEdgeInsets dividerContentEdgeInsets;
/// Divider color.
@property (nonatomic, strong) UIColor * _Nullable dividerColor;
/// Divider visibility.
@property (nonatomic) BOOL isDividerHidden;
/// Divider animation.
@property (nonatomic) enum DividerAlignment dividerAlignment;
/// Divider thickness.
@property (nonatomic) CGFloat dividerThickness;
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// A property that accesses the backing layer’s masksToBounds.
@property (nonatomic) BOOL masksToBounds;
/// A property that accesses the backing layer’s opacity.
@property (nonatomic) float opacity;
/// A property that accesses the backing layer’s anchorPoint.
@property (nonatomic) CGPoint anchorPoint;
/// A property that accesses the frame.origin.x property.
@property (nonatomic) CGFloat x;
/// A property that accesses the frame.origin.y property.
@property (nonatomic) CGFloat y;
/// A property that accesses the frame.size.width property.
@property (nonatomic) CGFloat width;
/// A property that accesses the frame.size.height property.
@property (nonatomic) CGFloat height;
/// HeightPreset value.
@property (nonatomic) enum HeightPreset heightPreset;
/// A property that manages the overall shape for the object. If either the
/// width or height property is set, the other will be automatically adjusted
/// to maintain the shape of the object.
@property (nonatomic) enum ShapePreset shapePreset;
/// A preset value for Depth.
@property (nonatomic) enum DepthPreset depthPreset;
/// A property that accesses the backing layer’s shadow
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
/// A property that accesses the backing layer’s shadowOffset.
@property (nonatomic) CGSize shadowOffset;
/// A property that accesses the backing layer’s shadowOpacity.
@property (nonatomic) float shadowOpacity;
/// A property that accesses the backing layer’s shadowRadius.
@property (nonatomic) CGFloat shadowRadius;
/// A property that accesses the backing layer’s shadowPath.
@property (nonatomic) CGPathRef _Nullable shadowPath;
/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL isShadowPathAutoSizing;
/// A property that sets the cornerRadius of the backing layer.
@property (nonatomic) enum CornerRadiusPreset cornerRadiusPreset;
/// A property that accesses the layer.cornerRadius.
@property (nonatomic) CGFloat cornerRadius;
/// A preset property to set the borderWidth.
@property (nonatomic) enum BorderWidthPreset borderWidthPreset;
/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;
/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;
/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;
/// Manages the layout for the shape of the view instance.
- (void)layoutShape;
/// Sets the shadow path.
- (void)layoutShadowPath;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the FABMenuController.
/// This is the recommended method of accessing the FABMenuController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) FABMenuController * _Nullable fabMenuController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// Determines whether to use a Motion instance for transitions.
/// \param forPresented presented A UIViewController.
///
/// \param presenting A UIViewController.
///
/// \param source A UIViewController.
///
///
/// returns:
/// An optional UIViewControllerAnimatedTransitioning.
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Determines whether to use a Motion instance for transitions.
/// \param forDismissed dismissed A UIViewController.
///
///
/// returns:
/// An optional UIViewControllerAnimatedTransitioning.
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
/// Determines whether to use a MotionPresentationController for transitions.
/// \param forPresented presented A UIViewController.
///
/// \param presenting A UIViewController.
///
/// \param source A UIViewController.
///
///
/// returns:
/// An optional UIPresentationController.
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the SearchBarController.
/// This is the recommended method of accessing the SearchBarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) SearchBarController * _Nullable searchBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the SnackbarController.
/// This is the recommended method of accessing the SnackbarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) SnackbarController * _Nullable snackbarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the StatusBarController.
/// This is the recommended method of accessing the StatusBarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) StatusBarController * _Nullable statusBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the TableViewController.
/// This is the recommended method of accessing the TableViewController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) TableViewController * _Nullable tableViewController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the ToolbarController.
/// This is the recommended method of accessing the ToolbarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) ToolbarController * _Nullable toolbarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the CollectionViewController.
/// This is the recommended method of accessing the CollectionViewController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) CollectionViewController * _Nullable collectionViewController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the NavigationDrawerController.
/// This is the recommended method of accessing the NavigationDrawerController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) NavigationDrawerController * _Nullable navigationDrawerController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the PageTabBarController.
/// This is the recommended method of accessing the PageTabBarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) PageTabBarController * _Nullable pageTabBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// Grid reference.
@property (nonatomic, readonly, strong) PageTabBarItem * _Nonnull pageTabBarItem;
@end


@interface UIViewController (SWIFT_EXTENSION(Material)) <MotionDelegate, UINavigationControllerDelegate, UITabBarControllerDelegate, UIViewControllerTransitioningDelegate>
/// A boolean that indicates whether motion is enabled.
@property (nonatomic) BOOL isMotionEnabled;
/// A reference to the MotionDelegate.
@property (nonatomic, weak) id <MotionDelegate> _Nullable motionDelegate;
/// Determines whether to use a Motion instance for transitions.
/// <ul>
///   <li>
///     _ navigationController: A UINavigationController.
///   </li>
/// </ul>
/// \param animationControllerFor operation A UINavigationControllerOperation.
///
/// \param from fromVC A UIViewController that is being transitioned from.
///
/// \param to toVC A UIViewController that is being transitioned to.
///
///
/// returns:
/// An optional UIViewControllerAnimatedTransitioning.
- (id <UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
/// Determines whether to use a Motion instance for transitions.
/// <ul>
///   <li>
///     _ tabBarController: A UITabBarController.
///   </li>
/// </ul>
/// \param animationControllerForTransitionFrom fromVC A UIViewController that is being transitioned from.
///
/// \param to toVC A UIViewController that is being transitioned to.
///
///
/// returns:
/// An optional UIViewControllerAnimatedTransitioning.
- (id <UIViewControllerAnimatedTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController animationControllerForTransitionFromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIWindow (SWIFT_EXTENSION(Material))
/// Captures a screenshot of the contents in the apps keyWindow.
///
/// returns:
/// An optional UIImage.
- (UIImage * _Nullable)capture SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
